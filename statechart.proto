package statechart;


message content {
    optional string string = 1;
    optional expression expression = 2;
    optional document document = 3;
}

message document {
    optional string name = 1;
    repeated transition initial_transitions = 2;
    repeated state states = 3;
}

enum expression_type {
    block = 1;
    null = 2;
    list = 3;
    map = 4;
    bool = 5;
    int = 6;
    float = 7;
    string = 8;
    raise = 9;
    case = 10;
    clause = 11;
    foreach = 12;
    log = 13;
    assign = 14;
    send = 15;
    cancel = 16;
    equal = 17;
    not_equal = 18;
}

message expression {
    required expression_type type = 1;
    optional bool bool_val = 2;
    optional sint32 int_val = 3;
    optional double float_val = 4;
    optional string string_val = 5;
    repeated expression args = 6;
}

message invoke {
    optional expression type = 1;
    optional expression src = 2;
    optional expression id = 3;
    optional bool autoforward = 4 [default = false];
    repeated param params = 5;
    optional content content = 6;
    repeated expression on_exit = 7;
}

message param {
    required string id = 1;
    optional expression expression = 2;
}

message state {
    required uint32 idx = 1;
    required uint32 depth = 2;
    optional string id = 3;
    optional state_type type = 4 [default = compound];
    repeated uint32 initial = 5;
    repeated transition transitions = 6;
    repeated invoke invocations = 7;
    repeated expression on_enter = 8;
    repeated expression on_exit = 9;
    repeated uint32 children = 10;
    optional uint32 parent = 11;
    repeated uint32 ancestors = 12;
    repeated uint32 descendants = 13;
    repeated uint32 history = 14;
    optional history_type history_type = 15;
}

enum state_type {
    compound = 1;
    basic = 2;
    parallel = 3;
    history = 4;
    initial = 5;
    final = 6;
}

enum history_type {
    shallow = 1;
    deep = 2;
}

enum transition_type {
    external = 1;
    internal = 2;
}

message transition {
    required uint32 idx = 1;
    required uint32 depth = 2;
    required uint32 scope = 3;
    optional uint32 source = 4;
    repeated uint32 targets = 5;
    repeated string events = 6;
    optional expression condition = 7;
    optional transition_type type = 8 [default = external];
    repeated expression on_transition = 9;
}

